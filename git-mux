#!/usr/bin/env sh
set -e

has() { command -v "$1" >/dev/null 2>&1; }

if [ -z "$GIT_MUX_SELECT_CMD" ] && ! has fzf; then
    echo "Error: install fzf or specify a different method for selection with the GIT_MUX_SELECT_CMD environment variable"
    exit 1
fi

export GIT_MUX_SELECT_CMD="${GIT_MUX_SELECT_CMD:-"fzf -1 -0 --cycle --reverse --height 30"}"
export GIT_MUX_PROJECTS="${GIT_MUX_PROJECTS:-"$HOME"}"
export GIT_MUX_BRANCH_PREFIX="${GIT_MUX_BRANCH_PREFIX:-""}"

GIT_MUX_DEBUG="${GIT_MUX_DEBUG:-""}"

debugger() {
    if [ -n "$GIT_MUX_DEBUG" ]; then
        echo "$1"
    fi
}

sanitize_name() {
    basename "$1" | tr "./" "__"
}

################################################################################
# tmux utils from https://github.com/thoughtbot/dotfiles/blob/main/bin/tat
################################################################################
tmux_session_exists() {
    tmux has-session -t "=$1" >/dev/null 2>&1
}

in_tmux() {
    [ -n "$TMUX" ]
}

has_tmux_server() {
    [ -n "$(pgrep tmux)" ]
}

tmux_create_if_needed_and_attach() {
    project_name="$(sanitize_name "$1")"
    if in_tmux; then
        if ! tmux_session_exists "$project_name"; then
            debugger "project > creating \"$project_name\" at path \"$1\""
            tmux new-session -Adc "$1" -s "$project_name"
        fi
        debugger "project > switching to \"$project_name\" at path \"$1\""
        tmux switch-client -t "$project_name"
    elif [ -d "$1" ]; then
        debugger "project > attaching to \"$project_name\" at path \"$1\""
        tmux new-session -Ac "$1" -s "$project_name"
    else
        debugger "project > creating"
        tmux new-session -s "$(sanitize_name "$PWD")"
    fi
}

has_tmux_server && GIT_MUX_TMUX_SESSION="$(tmux display-message -p "#S")"

################################################################################
# Clones a bare repo for use with git-worktree and creates an
# initial worktree for the repo's default branch.
# https://git-scm.com/docs/git-worktree
################################################################################
bare_clone() {
    new_repo_dir="${2:-"$(basename "$1" .git)"}"
    mkdir -p "$new_repo_dir"
    cd "$new_repo_dir" || return
    debugger "clone > cloning bare repo for \"$1\" in \"$(pwd)\""
    git clone --bare "$1" .git
    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
    git fetch origin
    # 60% of the time, it works every time (requires an origin or upstream remote)
    default_git_branch="$(
        git remote show "$(
            git remote | grep -Eo "(upstream|origin)" | tail -1
        )" | grep "HEAD branch" | cut -d" " -f5
    )"
    debugger "clone > creating worktree for default branch: $default_git_branch"
    git worktree add "$default_git_branch" "$default_git_branch"
    cd "$default_git_branch" || return
    unset new_repo_dir default_git_branch
}

################################################################################
# Use $GIT_MUX_SELECT_CMD to select a project from within the $GIT_MUX_PROJECTS
# directories.
################################################################################
select_project() {
    # shellcheck disable=2086
    find $GIT_MUX_PROJECTS -maxdepth 1 -mindepth 1 -type d | $GIT_MUX_SELECT_CMD
}

################################################################################
# Creates or attaches to a tmux session for a project. If the following argument
# is a valid path, it is used for the project. Otherwise the user is prompted
# to select a project.
################################################################################
handle_project() {
    if [ -n "$1" ] && [ -d "$1" ]; then
        debugger "project > valid path provided: $1"
        tmux_create_if_needed_and_attach "$1"
    else
        debugger "project > a valid path was not provided, selecting a project"
        tmux_create_if_needed_and_attach "$(select_project)"
    fi
}

################################################################################
# Use $GIT_MUX_SELECT_CMD to select an existing git branch for creating a task.
################################################################################
select_branch() {
    # remote and local branches sorted by commit date
    git for-each-ref refs/remotes refs/heads \
        --sort=-committerdate --format='%(refname:short)' |
        # filter by query, remove 'origin/' prefix, dedupe, select branch
        awk '/'"$GIT_MUX_BRANCH_DEFAULT_QUERY"'/{gsub("^origin/(HEAD)?","")};!x[$0]++' |
        $GIT_MUX_SELECT_CMD
}

################################################################################
# Determines the absolute path of the selected or provided project.
################################################################################
find_project_directory() {
    for projects_dir in $GIT_MUX_PROJECTS; do
        if [ -d "$projects_dir/$GIT_MUX_TMUX_SESSION" ]; then
            echo "$projects_dir/$GIT_MUX_TMUX_SESSION"
            return
        fi
    done
    if [ "$GIT_MUX_TMUX_SESSION" = "$(basename ~)" ]; then
        # pick a project if in the home session
        select_project && return
    else
        pwd
    fi
    unset projects_dir
}

################################################################################
# The logic that handles the git portion of the 'task' subcommand.
# See handle_task documentation below for more info.
################################################################################
git_task() {
    task_start_dir="$(find_project_directory)"

    debugger "task > project's directory: $task_start_dir"
    cd "$task_start_dir" || return 1

    if [ -d "$task_start_dir/.git" ] ||
        [ "$(git rev-parse --show-toplevel 2>/dev/null)" = "$task_start_dir" ]; then
        if [ -n "$1" ]; then
            task_branch="$GIT_MUX_BRANCH_PREFIX$1"
            ! git show-ref --verify --quiet "refs/heads/$task_branch" &&
                task_branch_flags="-b "
            debugger "task > provided branch with prefix: $task_branch"
            shift
        else
            task_branch=$(select_branch)
            debugger "task > selected branch: $task_branch"
        fi

        task_name="$(sanitize_name "$task_branch")"
        debugger "task > sanitized task name: $task_name"

        # naively assumes a bare repo will be using worktrees
        if [ "$(git config --get core.bare)" = "true" ]; then

            debugger "task > project is bare repo, using git-worktree"
            task_start_dir="$task_start_dir/$task_name"

            debugger "task > worktree directory: $task_start_dir"
            if [ ! -d "$task_start_dir" ]; then
                debugger "task > worktree does not exist, adding now"
                # shellcheck disable=2086
                git worktree add $task_name $task_branch_flags$task_branch
            fi
        else

            debugger "task > checking out branch"
            # shellcheck disable=2086
            git checkout $task_branch_flags$task_branch
        fi

        handle_task "$task_start_dir" "$*"
    fi

    unset task_start_dir task_name task_branch task_branch_flags
}

################################################################################
# Attaches/switches to a tmux window. If the next argument is a valid path,
# the window is created in that directory. If there are arguments after a valid
# path, they are sent to the window and ran instead of attaching/switching.
#
#
# If the initial argument isn't a valid path it is treated a a git branch and
# creates/switches to a corresponding git worktree (when relevant). If no
# argument is provided it prompts to select an existing branch.
#
# Examples:
#
# Install deps and start app in a tmux window, creating one if it doesn't exist
# $ git mux task packages/app npm install && npm start
#
# Create/checkout branch in tmux window, creating a git worktree if relevant.
# Appends $GIT_MUX_BRANCH_PREFIX to the argument when creating a new branch.
# $ git mux task 123-fix-bug
#
# Uses $GIT_MUX_SELECT_CMD to select an existing branch.
# $ git mux t
################################################################################
handle_task() {
    debugger "task > args: $*"
    # Check if the provided argument is a valid path
    if [ -n "$1" ] && [ -d "$1" ]; then
        task_name=$(sanitize_name "$1")
        task_dir="$(cd "$1" && pwd)"
    else
        git_task "$*"
        return 0
    fi

    debugger "task > creating new \"$task_name\" task in \"$task_dir\": $*"
    tmux new-window -Sdn "$task_name" -c "$task_dir"

    # Attach, switch, or send keys to the new task
    if [ -n "$2" ]; then
        shift
        debugger "task > executing command (not attaching/switching): \"$*\""
        tmux send-keys -t "$GIT_MUX_TMUX_SESSION:$task_name" "$*" Enter
    elif [ -n "$TMUX" ]; then

        debugger "task > switching client"
        tmux switch-client -t "$GIT_MUX_TMUX_SESSION:$task_name"
    else
        debugger "task > attaching"
        tmux attach -t "$GIT_MUX_TMUX_SESSION:$task_name"
    fi

    unset task_name task_dir
}

usage() {
    if [ -n "$1" ]; then
        echo "$1"
        echo
    fi
    echo "Usage: git mux <command> [<args>]"
    echo
    echo "Comands:"
    echo "  startup, s         Create a tmux session if one doesn't exist, and attach to the home project."
    echo "  project, p         Create or switch to a project, usually a git repo."
    echo "  task,    t         Create, switch, or send text to a task within a project, usually a git branch."
    echo "  debug,   d         Runs the following subcommand and arguments with logging."
    echo ""
    echo "Example: git mux task ~/projects/my-app 'npm i && npm run build'"
    exit 1
}

parse_args() {
    if [ -n "$1" ]; then
        case $1 in
            c | clone)
                shift
                bare_clone "$*"
                ;;
            t | task)
                shift
                handle_task "$*"
                ;;
            p | project)
                shift
                handle_project "$*"
                ;;
            s | startup)
                shift
                tmux_create_if_needed_and_attach "$*"
                ;;
            -h | --help)
                usage
                ;;
            # h | help)
            #     command_usage
            #     ;;
            d | debug)
                GIT_MUX_DEBUG=1
                shift
                echo "running in debug mode"
                parse_args "$@"
                ;;
            *)
                usage "Unknown command passed: $1"
                ;;
        esac
    else
        usage
    fi
}

parse_args "$@"
