.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "git-mux" "1" "Aug 9, 2023" "git-mux user manual" ""
.hy
.SH NAME
.PP
git-mux - a git+tmux lovechild for jumping between projects and tasks,
blazingly fast.
.SH SYNOPSIS
.PP
git mux [arg\&...]
.SH COMMANDS
.PP
c, clone
.IP
.nf
\f[C]
Clone and configure a bare git repo for use with worktrees.
\f[R]
.fi
.PP
p, project
.IP
.nf
\f[C]
Create or switch to a project (tmux session). Projects are usually (but not required to be) a git repo.
\f[R]
.fi
.PP
t, task
.IP
.nf
\f[C]
Create, switch, or send text to a task (tmux window). Tasks are usually (but not required to be) a git worktree.
\f[R]
.fi
.PP
h, help
.IP
.nf
\f[C]
Show this message, or show help for one of the above commands by providing it as an argument.
\f[R]
.fi
.PP
config
.IP
.nf
\f[C]
Print the current configuration values to stdout.
\f[R]
.fi
.SH EXAMPLES
.PP
Select a project and create or switch to its tmux session
.IP
.nf
\f[C]
$ git mux p
\f[R]
.fi
.PP
Directly create or switch to a project (useful for
aliases/keymaps/startup)
.IP
.nf
\f[C]
$ git mux project \[ti]/projects/my-app
\f[R]
.fi
.PP
Select a git branch and create or switch to its git worktree and tmux
window
.IP
.nf
\f[C]
$ git mux t
\f[R]
.fi
.PP
If `feature/123' is a valid path, it will be used for the task.
Otherwise assume it is a git branch, creating the branch if it
doesn\[cq]t exist.
If the project is a bare repo, create and/or switch to its worktree.
Otherwise checkout the new branch.
All 3 cases create and/or switch to a tmux window named `123'
(basename).
The window name can be specified with an additional argument.
.IP
.nf
\f[C]
$ git mux task feature/123
\f[R]
.fi
.PP
Run commands in a tmux window named npm_stuff without switching to it
Specifying a window name is required when sending commands
.IP
.nf
\f[C]
$ git mux task \[ti]/projects/my-app npm_stuff npm i && npm run build
\f[R]
.fi
.SH ENVIRONMENT VARIABLES
.PP
git-mux can be configured with the following environment variables:
.PP
GIT_MUX_PROJECTS
.IP
.nf
\f[C]
Space-separated list of projects for selection.
\f[R]
.fi
.PP
GIT_MUX_PROJECT_PARENTS
.IP
.nf
\f[C]
Space-separated list of directories that contain projects.

- defaults to $PROJECTS or $HOME
- selects from child dirs using \[ga]find\[ga] (depth of 1)
- ignored if $GIT_MUX_PROJECTS is set
\f[R]
.fi
.PP
GIT_MUX_SELECT_CMD
.IP
.nf
\f[C]
Command used to select a project.
- defaults to \[ga]fzf\[ga]
- receives the directory list from stdin
- sends a single, selected directory to stdout
\f[R]
.fi
.PP
GIT_MUX_BRANCH_PREFIX
.IP
.nf
\f[C]
A string to prepend to new branches created via task.
- off by default
- the resulting branch format is \[dq]<prefix>/<name>\[dq]
- ignored if the provided <name> already contains a \[dq]/\[dq]
- common examples: \[dq]feature\[dq] or \[dq]$(id -un)\[dq]
\f[R]
.fi
.PP
GIT_MUX_NEW_WORKTREE_CMD
.IP
.nf
\f[C]
Commands to execute in the tmux window when a new
git worktree is created via task.
- off by default
- example: [ -f \[dq]./package.json\[dq] ] && npm i
\f[R]
.fi
.PP
GIT_MUX_LOGS
.IP
.nf
\f[C]
Path to a file for printing logs.
- Set to \[dq]0\[dq] to disable logging.
- default is picked in the following order:
- \[dq]$XDG_STATE_HOME/shutils/git-mux.log\[dq]
- \[dq]$HOME/.local/state/shutils/git-mux.log\[dq]
-  <shutils repo clone>/logs/git-mux.log
\f[R]
.fi
.SH COMPATIBILITY
.PP
\f[C]git-mux\f[R] is POSIX compliant (according to ShellCheck), meaning
you should be able to use \f[C]git-mux\f[R].
Please log an issue on GitHub if you experience compliance problems.
Additionally, the following dependencies are used:
.IP \[bu] 2
\f[C]tmux\f[R] (required)
.IP \[bu] 2
\f[C]git\f[R] (required)
.IP \[bu] 2
\f[C]grep\f[R] (required)
.IP \[bu] 2
\f[C]fzf\f[R] (to replace, see: \f[C]man git-mux-config\f[R])
.IP \[bu] 2
\f[C]find\f[R] (to prevent usage, see: \f[C]man git-mux-config\f[R])
.SH AUTHORS
Ben Elan <no-reply@benelan.dev>.
