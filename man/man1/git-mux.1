.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "git-mux" "1" "Aug 9, 2023" "git-mux user manual" ""
.hy
.SH NAME
.PP
\f[B]git-mux\f[R] - a git + tmux lovechild for blazingly fast movement
between projects and tasks.
.SH SYNOPSIS
.PP
\f[B]git mux clone\f[R] \f[I]repository\f[R]
.PP
\f[B]git mux project\f[R] [\f[I]path\f[R]]
.PP
\f[B]git mux task\f[R] [\f[I]branch-name\f[R]] [\f[I]window-name\f[R]]
.PP
\f[B]git mux task\f[R] \f[I]path\f[R] [\f[I]window-name\f[R]]
[\f[I]remote-command\f[R]\&...]
.PP
\f[B]git mux config\f[R]
.PP
\f[B]git mux help\f[R]
.SH COMMANDS
.TP
\f[B]c\f[R], \f[B]clone\f[R]
Clone and configure a bare \f[B]git\f[R](1) \f[I]repository\f[R] for use
with worktrees.
.TP
\f[B]p\f[R], \f[B]\f[BI]project\f[B]\f[R]
Create or switch to a \f[B]project\f[R], which is a \f[B]tmux\f[R](1)
session.
Projects are also usually (but not required to be) a \f[B]git\f[R](1)
repo.
.TP
\f[B]t\f[R], \f[B]\f[BI]task\f[B]\f[R]
Create, switch, or send text to a \f[B]task\f[R], which is a
\f[B]tmux\f[R](1) window.
Tasks are also usually (but not required to be) a
\f[B]git-worktree\f[R](1) or \f[B]git-branch\f[R](1).
.TP
\f[B]h\f[R], \f[B]help\f[R]
Print a concise help message to \f[B]stdout\f[R](3).
.TP
\f[B]config\f[R]
Print the current configuration values to \f[B]stdout\f[R](3).
See the \f[I]ENVIRONMENT\f[R] section for configuration options.
.SH EXAMPLES
.TP
\f[B]git mux p\f[R]
Select a \f[B]project\f[R], then create and/or switch to its
\f[B]tmux\f[R](1) session.
.TP
\f[B]git mux project \[ti]/projects/my-app\f[R]
Directly create and/or switch to a \f[B]project\f[R] (useful for
aliases/keybindings).
.TP
\f[B]git mux t\f[R]
Select a \f[B]git-branch\f[R](1), then create and/or switch to its
\f[B]git-worktree\f[R](1) and \f[B]tmux\f[R](1) window.
.TP
\f[B]git mux task feature/123\f[R]
If \[lq]feature/123\[rq] is a valid \f[I]path\f[R], it will be used for
the \f[B]task\f[R].
Otherwise assume it is a \f[I]branch-name\f[R], creating the
\f[B]git-branch\f[R](1) if it doesn\[cq]t exist.
If the \f[B]project\f[R] is a bare repo, create and/or switch to its
\f[B]git-worktree\f[R](1).
Otherwise checkout the branch.
.RS
.PP
By default, all of the above cases create and/or switch to a
\f[B]tmux\f[R](1) window named \[lq]123\[rq], via \f[B]basename\f[R](1).
The \f[B]tmux\f[R](1) \f[I]window-name\f[R] can be specified with an
additional argument.
.RE
.TP
\f[B]git mux task \[ti]/projects/my-app npm_stuff npm i && npm run build\f[R]
Run commands in a \f[B]tmux\f[R](1) window named \[lq]npm_stuff\[rq]
without switching to it.
Specifying a \f[I]window-name\f[R] is required when sending commands.
.SH ENVIRONMENT VARIABLES
.PP
\f[B]git-mux\f[R] can be configured with the following environment
variables:
.TP
\f[B]GIT_MUX_PROJECTS\f[R]
Space-separated list of projects for selection.
The \f[B]project\f[R] paths must be absolute, and can start with
\[lq]\[ti]\[rq].
.TP
\f[B]GIT_MUX_PROJECT_PARENTS\f[R]
Space-separated list of directories that contain projects.
Defaults to \f[B]$PROJECTS\f[R] if set, otherwise \f[B]$HOME\f[R].
Uses \f[B]find\f[R](1) to get child directories (depth of 1), which are
then used for \f[B]$GIT_MUX_PROJECTS\f[R].
.RS
.PP
This option is ignored if \f[B]$GIT_MUX_PROJECTS\f[R] is already set.
.RE
.TP
\f[B]GIT_MUX_SELECT_CMD\f[R]
Command used to select a \f[B]project\f[R].
Defaults to using \f[B]fzf\f[R](1).
This can be changed to any command, as long as it receives the directory
list from \f[B]stdin\f[R](3) and sends a single, selected directory to
\f[B]stdout\f[R](3).
.TP
\f[B]GIT_MUX_BRANCH_PREFIX\f[R]
A \f[I]prefix\f[R] string to prepend to new branches created via
\f[B]task\f[R].
Unset by default.
.RS
.PP
When set, the resulting \f[B]git-branch\f[R](1) name is
\[lq]\f[I]prefix\f[R]/\f[I]branch-name\f[R]\[rq].
This option is ignored if the provided \f[I]branch-name\f[R] already
contains a \[lq]/\[rq].
.PP
Some common examples are \f[B]\[lq]feature\[rq]\f[R] and \f[B]\[lq]$(id
-un)\[rq]\f[R].
.RE
.TP
\f[B]GIT_MUX_NEW_WORKTREE_CMD\f[R]
Specify a set of commands to execute in the \f[B]tmux\f[R](1) window
when a new \f[B]git-worktree\f[R](1) is created via the \f[B]task\f[R]
command.
Unset by default.
.RS
.PP
For example: \f[B]\[lq][ -f `./package.json' ] && npm i\[rq]\f[R]
.RE
.TP
\f[B]GIT_MUX_LOGS\f[R]
Path to a log file.
Logs are disabled if set to \[lq]0\[rq] or unset, which is the default.
.RS
.PP
If set to \[lq]1\[rq], a default path is determined by first checking if
\f[B]$XDG_STATE_HOME\f[R] is set, then if \f[B]$HOME/.local/state\f[R]
is a directory, and finally falling back to \f[B]$HOME\f[R].
The log file will be create as \f[I]git-mux/logs\f[R] in the determined
directory.
.RE
.SH COMPATIBILITY
.PP
\f[B]git-mux\f[R] is POSIX compliant (according to ShellCheck), meaning
it should work on your system.
See the \f[I]BUGS\f[R] section below if you experience compatibility
problems.
.PP
The following dependencies are required: \f[B]tmux\f[R](1),
\f[B]git\f[R](1), \f[B]grep\f[R](1)
.PP
These dependencies are optional: \f[B]fzf\f[R](1), \f[B]find\f[R](1)
.PP
See the \f[I]ENVIRONMENT\f[R] section for alternatives to the optional
dependencies.
.SH BUGS
.PP
If you experience any problems with \f[B]git-mux\f[R] or have ideas for
a new feature, please submit an issue on GitHub:
https://github.com/benelan/git-mux/issues
.SH SEE ALSO
.PP
\f[B]git-repository-layout\f[R](7), \f[B]git-worktree\f[R](1),
\f[B]tmux\f[R](1), \f[B]fzf\f[R](1)
.SH AUTHORS
Ben Elan <no-reply@benelan.dev>.
