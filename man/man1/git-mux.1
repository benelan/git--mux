.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "git-mux" "1" "2023-08-12" "git-mux user manual" ""
.hy
.SH NAME
.PP
\f[B]git-mux\f[R] - a git + tmux lovechild for blazingly fast movement
between projects and tasks
.SH SYNOPSIS
.PP
\f[B]git mux clone\f[R] \f[I]repository\f[R]
.PD 0
.P
.PD
\f[B]git mux project\f[R] [\f[I]path\f[R]]
.PD 0
.P
.PD
\f[B]git mux task\f[R] [\f[I]branch-name\f[R]] [\f[I]window-name\f[R]]
.PD 0
.P
.PD
\f[B]git mux task\f[R] \f[I]path\f[R] [\f[I]window-name\f[R]]
[\f[I]remote-command\f[R]...]
.PD 0
.P
.PD
\f[B]git mux config\f[R]
.PD 0
.P
.PD
\f[B]git mux help\f[R]
.SH COMMANDS
.TP
\f[B]c\f[R], \f[B]clone\f[R]
Clone and configure a bare \f[B]git\f[R](1) \f[I]repository\f[R] for use
with worktrees.
.TP
\f[B]p\f[R], \f[B]project\f[R]
Create or switch to a \f[B]project\f[R], which is a \f[B]tmux\f[R](1)
session.
Projects are also usually (but not required to be) a \f[B]git\f[R](1)
repo.
.TP
\f[B]t\f[R], \f[B]task\f[R]
Create, switch, or send text to a \f[B]task\f[R], which is a
\f[B]tmux\f[R](1) window.
Tasks are also usually (but not required to be) a
\f[B]git-worktree\f[R](1) or \f[B]git-branch\f[R](1).
.TP
\f[B]h\f[R], \f[B]help\f[R]
Print a concise help message to \f[B]stdout\f[R](3).
.TP
\f[B]config\f[R]
Print the current configuration values to \f[B]stdout\f[R](3).
See the \f[I]ENVIRONMENT\f[R] section for configuration options.
.SH EXAMPLES
.TP
\f[B]git mux p\f[R]
Select a \f[B]project\f[R], then create and/or switch to its
\f[B]tmux\f[R](1) session.
.TP
\f[B]git mux project \[ti]/projects/my-app\f[R]
Directly create and/or switch to a \f[B]project\f[R] (useful for
aliases/keybindings).
.TP
\f[B]git mux t\f[R]
Select a \f[B]git-branch\f[R](1), then create and/or switch to its
\f[B]git-worktree\f[R](1) and \f[B]tmux\f[R](1) window.
.TP
\f[B]git mux task feature/123\f[R]
If \[dq]feature/123\[dq] is a valid \f[I]path\f[R], it will be used for
the \f[B]task\f[R].
Otherwise assume it is a \f[I]branch-name\f[R], creating the
\f[B]git-branch\f[R](1) if it doesn\[aq]t exist.
If the \f[B]project\f[R] is a bare repo, create and/or switch to its
\f[B]git-worktree\f[R](1).
Otherwise checkout the branch.
.RS
.PP
By default, all of the above cases create and/or switch to a
\f[B]tmux\f[R](1) window named \[dq]123\[dq], via \f[B]basename\f[R](1).
The \f[B]tmux\f[R](1) \f[I]window-name\f[R] can be specified with an
additional argument.
.RE
.TP
\f[B]git mux task \[ti]/projects/my-app npm_stuff npm i && npm run build\f[R]
Run commands in a \f[B]tmux\f[R](1) window named \[dq]npm_stuff\[dq]
without switching to it.
Specifying a \f[I]window-name\f[R] is required when sending commands.
.SH ENVIRONMENT VARIABLES
.PP
\f[B]git-mux\f[R] can be configured with the following environment
variables.
Note that either \f[B]$GIT_MUX_PROJECTS\f[R] or
\f[B]$GIT_MUX_PROJECT_PARENTS\f[R] must be set, and setting both will
combine the values.
.TP
\f[B]GIT_MUX_PROJECTS\f[R]
Space-separated list of individual \f[B]project\f[R] directories for
selection.
The \f[B]project\f[R] paths must be absolute, and can start with
\[dq]\[ti]\[dq].
.RS
.PP
For example: \f[B]\[aq]\[ti]/notes \[ti]/.config/nvim\[aq]\f[R]
.RE
.TP
\f[B]GIT_MUX_PROJECT_PARENTS\f[R]
Space-separated list of directories that contain projects.
Defaults to \f[B]$PROJECTS\f[R] if set.
The direct child directories (depth=1) of each parent are used for
selection.
.RS
.PP
For example: \f[B]\[aq]\[ti]/dev/work \[ti]/dev/personal\[aq]\f[R]
.RE
.PP
In the two examples above, the full list of projects for selection would
be:
.IP
.nf
\f[C]
\[ti]/notes  
\[ti]/.config/nvim  
\[ti]/work/acme-cli  
\[ti]/work/acme-site  
\[ti]/personal/my-brilliant-app-ideas  
\[ti]/personal/my-failed-startup  
\f[R]
.fi
.PP
Assuming a file structure like this:
.IP
.nf
\f[C]
\[ti]/
\[u251C]\[u2500] .config/
\[br]  \[u251C]\[u2500] nvim/
\[br]  \[br]  \[u251C]\[u2500] lua/
\[br]  \[br]  \[u251C]\[u2500] init.lua
\[u251C]\[u2500] notes/
\[br]  \[u251C]\[u2500] how_to_quit_neovim.md
\[u251C]\[u2500] personal/
\[br]  \[u251C]\[u2500] my-brilliant-app-ideas/
\[br]  \[u251C]\[u2500] my-failed-startup/
\[br]  \[br]  \[u251C]\[u2500] whats_a11y.lawsuit.html
\[u251C]\[u2500] work/
\[br]  \[u251C]\[u2500] acme-cli/
\[br]  \[br]  \[u251C]\[u2500] just_download_more_ram.js
\[br]  \[u251C]\[u2500] acme-site/
\[br]  \[br]  \[u251C]\[u2500] src/
\[br]  \[br]  \[br]  \[u251C]\[u2500] spaghetti.jsx
\f[R]
.fi
.TP
\f[B]GIT_MUX_SELECT_CMD\f[R]
Command used to select a \f[B]project\f[R].
Defaults to using \f[B]fzf\f[R](1).
This can be changed to any command, as long as it receives the directory
list from \f[B]stdin\f[R](3) and sends a single, selected directory to
\f[B]stdout\f[R](3).
.RS
.PP
For example, create a script on your \f[B]$PATH\f[R] (e.g.,
\f[I]\[ti]/.local/bin/selectproj\f[R]):
.IP
.nf
\f[C]
#!/usr/bin/env sh
stdin=$(cat)
# shellcheck disable=2086,2069
dialog --no-items --erase-on-exit --menu \[rs]
    \[dq]Select a project\[dq] 0 0 0 $stdin 2>&1 >/dev/tty
\f[R]
.fi
.PP
Then add the following to your shell\[aq]s startup files (e.g.,
\f[I]\[ti]/.bashrc\f[R]):
.IP
.nf
\f[C]
export GIT_MUX_SELECT_CMD=\[dq]selectproj\[dq]
\f[R]
.fi
.RE
.TP
\f[B]GIT_MUX_BRANCH_PREFIX\f[R]
A \f[I]prefix\f[R] string to prepend to new branches created via
\f[B]task\f[R].
Unset by default.
.RS
.PP
When set, the resulting \f[B]git-branch\f[R](1) name is
\[dq]\f[I]prefix\f[R]/\f[I]branch-name\f[R]\[dq].
This option is ignored if the provided \f[I]branch-name\f[R] already
contains a \[dq]/\[dq].
.PP
For example: \f[B]\[dq]feature\[dq]\f[R] or \f[B]\[dq]$(id
-un)\[dq]\f[R]
.RE
.TP
\f[B]GIT_MUX_NEW_WORKTREE_CMD\f[R]
Specify a set of commands to execute in the \f[B]tmux\f[R](1) window
when a new \f[B]git-worktree\f[R](1) is created via the \f[B]task\f[R]
command.
Unset by default.
.RS
.PP
For example: \f[B]\[aq][ -f \[aq]./package.json\[aq] ] && npm
i\[aq]\f[R]
.RE
.TP
\f[B]GIT_MUX_LOGS\f[R]
Path to a log file.
Logs are disabled if set to \[dq]0\[dq] or unset, which is the default.
.RS
.PP
If set to \[dq]1\[dq], the logs are saved to
\f[B]$XDG_STATE_HOME/git-mux/logs\f[R], or
\f[B]$HOME/.local/state/git-mux/logs\f[R] if \f[B]$XDG_STATE_HOME\f[R]
is not set.
.RE
.SH COMPATIBILITY
.PP
The following external tools are used by \f[B]git-mux\f[R]:
.IP \[bu] 2
\f[B]tmux\f[R](1) - Required.
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]git\f[R](1) - Required by the \f[B]task\f[R] command if the next
argument is not a valid path.
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]fzf\f[R](1) - Required by default, but can be changed using
\f[B]$GIT_MUX_SELECT_CMD\f[R] configuration option.
See the \f[I]ENVIRONMENT\f[R] section.
.PP
\f[B]git-mux\f[R] should be POSIX compliant (other than the non-standard
utilities listed above), meaning it will likely work on your system.
Unless you\[aq]re using Windows without WSL, in which case I don\[aq]t
know how you ended up reading this sentence in the first place.
.PP
Please log an issue if you are on a Unix machine and experience any
compatability issues.
.SH BUGS
.PP
If you experience any problems with \f[B]git-mux\f[R] or have ideas for
a new feature, please submit an issue on GitHub:
.PD 0
.P
.PD
\f[B]https://github.com/benelan/git-mux/issues\f[R]
.SH SEE ALSO
.PP
\f[B]git-repository-layout\f[R](7), \f[B]git-worktree\f[R](1),
\f[B]tmux\f[R](1), \f[B]fzf\f[R](1)
.SH AUTHORS
Ben Elan <no-reply@benelan.dev>.
