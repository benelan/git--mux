#!/usr/bin/env sh
set -o errexit

# Outputs text matching a specified pattern.
#
# The -s flag requires the following scripts:
#   - `os-cb`     to access the clipboard
#   - `os-open`   to open with the default system application
#   - `os-detect` to determine the operating system for the above scripts
#
# Alternatively set OS_COPY_CMD and OS_OPEN_CMD env vars for your operating system.
# For example, on linux puth the following in your .bashrc (or equivalent):
# export OS_COPY_CMD="xclip -selection clipboard"
# export OS_OPEN_CMD="xdg-open"
#
# The MIT License (MIT)
# Copyright (c) 2023-present Ben Elan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

OS_COPY_CMD="${OS_COPY_CMD:-os-cb}"
OS_OPEN_CMD="${OS_OPEN_CMD:-os-open}"

find_shutils_dir() {
    __util_src="$0"
    while [ -h "$__util_src" ]; do
        __util_target="$(readlink "$__util_src")"
        case $__util_target in
            /*) __util_src="$__util_target" ;;
            *) __util_src="$(dirname "$__util_src")/$__util_target" ;;
        esac
    done

    cd -P "$(dirname "$__util_src")/.." >/dev/null 2>&1 && pwd
}

SHUTILS_DIR=${SHUTILS_DIR:-$(find_shutils_dir)}

if [ -z "$MATPAT_LOGS" ]; then
    if [ -d "$XDG_STATE_HOME" ]; then
        MATPAT_LOGS="$XDG_STATE_HOME/shutils/matpat.log"
    elif [ -d "$HOME/.local/state" ]; then
        MATPAT_LOGS="$HOME/.local/state/shutils/matpat.log"
    else
        MATPAT_LOGS="${SHUTILS_DIR}/logs/matpat.log"
    fi
    echo "$MATPAT_LOGS"
    mkdir -p "$(dirname "$MATPAT_LOGS")"
elif [ "$MATPAT_LOGS" = "0" ]; then
    MATPAT_LOGS="/dev/null"
else
    echo "$MATPAT_LOGS"
    mkdir -p "$(dirname "$MATPAT_LOGS")"
fi

logger() {
    echo "$(date +%Y-%m-%dT%H:%M:%S 2>>"$MATPAT_LOGS") > $1" >>"$MATPAT_LOGS"
}

# --------------------------------------------------------------------- }}}
# Usage info                                                            {{{
# --------------------------------------------------------------------- {|}

help() {
    [ -n "$*" ] && echo "$*"
    [ -f "$SHUTILS_DIR/docs/matpat.txt" ] &&
        cat "$SHUTILS_DIR/docs/matpat.txt"
    exit 1
}

# --------------------------------------------------------------------- }}}
# Patterns                                                              {{{
# --------------------------------------------------------------------- {|}

uri() {
    # https://en.wikipedia.org/wiki/List_of_URI_schemes
    _uri_network_schemes='(?:https?://|\bwww\.|s?ftp://|wss?:|ssh://|udp://|vnc://|ldaps?://|dns://'
    _uri_app_schemes='payto://|mailto:|callto:|tel:|magnet:|maps:|geo:|slack://|msteams://|news://|steam://|obsidian://'
    _uri_misc_schemes='s3://|rediss?://|git://|svn://|cvs://|nfs://|file://|data:)'
    _uri_schemes="(?:$_uri_network_schemes|$_uri_app_schemes|$_uri_misc_schemes)"
    grep -oP "${_uri_schemes}[a-zA-Z0-9\-\@;\/?:&=%\$_.+!*\x27,~#]*(\([a-zA-Z0-9\-\@;\/?:&=%\$_.+!*\x27,~#]*\)|[a-zA-Z0-9\-\@;\/?:&=%\$_+*~])+"
}

ip_address() {
    grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'
}

git_sha() {
    grep -oE '\b[0-9a-f]{5,40}\b'
}

git_sha_range() {
    grep -oE '[0-9a-fA-F]+\.\.\.?[0-9a-fA-F]+'
}

# --------------------------------------------------------------------- }}}
# Find/select or print matches                                          {{{
# --------------------------------------------------------------------- {|}

select_match() {
    echo "$1" |
        uniq |
        fzf --no-multi --no-exit-0 --no-select-1 \
            --header='(ctrl-y:copy) (ctrl-o:open) (enter:stdout)' \
            --bind "ctrl-o:execute($OS_OPEN_CMD {})+accept" \
            --bind "ctrl-y:execute(echo {} | $OS_COPY_CMD)+accept"
}

select_pattern() {
    printf "%s\\n%s\\n%s\\n%s" \
        'uri' \
        'ip_address' \
        'git_sha_range' \
        'git_sha' |
        fzf --no-multi --header "select pattern"
}

match_pattern() {
    if [ -z "$1" ]; then
        logger "ERROR: no pattern specified or selected"
        help "No pattern specified."
    fi
    if [ -n "$tmux_mode" ]; then
        logger "finding matches in all open tmux panes"
        matches=$(for pane in $(tmux list-pane -a -F "#S:#I.#P"); do
            tmux capture-pane -t "$pane" -p
        done | $1)
    else
        logger "finding matches from stdin"
        # shellcheck disable=2086
        matches=$(eval $1)
    fi

    if [ -n "$select_mode" ]; then
        logger "interactively selecting a match"
        select_match "$matches"
    else
        logger "printing matches to stdout"
        echo "$matches"
    fi

    unset select_mode tmux_mode matches
}

# --------------------------------------------------------------------- }}}
# Parse args                                                            {{{
# --------------------------------------------------------------------- {|}

# if stdin is piped or not tty
stdin_is_pipe_like() { [ -p /dev/stdin ] || ! [ -t 0 ]; }

main() {
    # Print usage info if `matpat` is called with no args, unless stdin
    # is piped, in which case prompt the user to select a pattern.
    if ! stdin_is_pipe_like; then
        [ -z "$1" ] && help
        # Automatically turn on tmux mode if attached and stdin is
        # not piped, otherwise it hangs waiting for stdin.
        [ -n "$TMUX" ] && tmux_mode=1
    fi

    pattern="select"

    while getopts p:ths opt; do
        case $opt in
            h) help ;;
            p)
                logger "pattern specified: $pattern"
                pattern="$OPTARG"
                ;;
            t)
                logger "tmux mode enabled"
                tmux_mode=1
                ;;
            s)
                logger "select mode enabled"
                select_mode=1
                ;;
            *)
                logger "ERROR: Invalid flag \"$opt\""
                help "Invalid flag: $opt"
                ;;
        esac
    done

    shift "$((OPTIND - 1))"

    case $pattern in
        i | ip | ip_address) match_pattern ip_address ;;
        r | range | git_range) match_pattern git_sha_range ;;
        s | sha | git_sha) match_pattern git_sha ;;
        u | uri | url) match_pattern uri ;;
        select)
            logger "no pattern specified, interactively selecting one"
            match_pattern "$(select_pattern)"
            ;;
        *)
            logger "ERROR: Unknown pattern \"$pattern\""
            help "Unknown pattern: $pattern"
            ;;
    esac
}

echo "" >>"$MATPAT_LOGS"
main "$@"
