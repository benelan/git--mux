#!/usr/bin/env sh
set -o errexit

COPY_CMD="${COPY_CMD:-os-cb}"
OPEN_CMD="${OPEN_CMD:-os-open}"

#
# Outputs text matching a specified pattern.
# https://github.com/benelan/dotfiles/blob/master/.dotfiles/bin/matpat
#
# The -y flag requires the following scripts:
#   - `cb` to access the clipboard:
#      https://github.com/benelan/dotfiles/blob/master/.dotfiles/bin/cb
#   - `o` to open with the default system application:
#      https://github.com/benelan/dotfiles/blob/master/.dotfiles/bin/o
#   - `os-detect` to determine the commands to use in `cb` and `o`
#      https://github.com/benelan/dotfiles/blob/master/.dotfiles/bin/os-detect
#
# Alternatively set COPY_CMD and OPEN_CMD env vars for your operating system.
#
# The MIT License (MIT)
# Copyright (c) 2023-present Ben Elan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# --------------------------------------------------------------------- }}}
# Usage info                                                            {{{
# --------------------------------------------------------------------- {|}

usage() {
    if [ -n "$1" ]; then
        echo "$1"
    fi
    cat <<EOF
Matches input text against the specified pattern.

Usage:    matpat <arguments>

Arguments:
    t                      Get the text to match from tmux panes instead of stdin.
    s                      Select a single match with fzf to yank or open instead
                             of sending all matches to stdout.
    p                      The pattern to match against (options specified below).
                             fzf is used to choose a pattern if the flag is omitted.
Patterns:
  u,  uri,    url          Output all matched URIs (https://cht.sh or file://...)
  i,  ip,     ip_address   Output all matched IP addresses (192.168.1.1)
  s,  sha,    git_sha      Output all matched short or long Git SHAs (64945dd)
  r,  range,  git_range    Output all matched Git SHA ranges (123456..654321)

Examples:
  # get all IP addresses from a log file (omit the arg to pick a pattern interactively)
      cat logs/access.log | matpat -p ip
  # get URIs from tmux panes and select one using fzf to open or copy to clipboard
      matpat -ytp u
EOF
    exit 1
}

# --------------------------------------------------------------------- }}}
# Patterns                                                              {{{
# --------------------------------------------------------------------- {|}

uri() {
    # https://en.wikipedia.org/wiki/List_of_URI_schemes
    _uri_network_schemes='(?:https?://|\bwww\.|s?ftp://|wss?:|ssh://|udp://|vnc://|ldaps?://|dns://'
    _uri_app_schemes='payto://|mailto:|callto:|tel:|magnet:|maps:|geo:|slack://|msteams://|news://|steam://|obsidian://'
    _uri_misc_schemes='s3://|rediss?://|git://|svn://|cvs://|nfs://|file://|data:)'
    _uri_schemes="(?:$_uri_network_schemes|$_uri_app_schemes|$_uri_misc_schemes)"
    grep -oP "${_uri_schemes}[a-zA-Z0-9\-\@;\/?:&=%\$_.+!*\x27,~#]*(\([a-zA-Z0-9\-\@;\/?:&=%\$_.+!*\x27,~#]*\)|[a-zA-Z0-9\-\@;\/?:&=%\$_+*~])+"

}

ip_address() {
    grep -oP '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'

}

git_sha() {
    grep -oE '\b[0-9a-f]{5,40}\b'

}

git_sha_range() {
    grep -oE '[0-9a-fA-F]+\.\.\.?[0-9a-fA-F]+'
}

# --------------------------------------------------------------------- }}}
# Find and select or print matches                                      {{{
# --------------------------------------------------------------------- {|}

select_match() {
    echo "$1" |
        uniq |
        fzf --no-multi --no-exit-0 --no-select-1 \
            --header='(ctrl-y:copy) (ctrl-o:open) (enter:stdout)' \
            --bind "ctrl-o:execute($OPEN_CMD {})+accept" \
            --bind "ctrl-y:execute(echo {} | ${COPY_CMD})+accept"
}

select_pattern() {
    printf "%s\\n%s\\n%s\\n%s" \
        'uri' \
        'ip_address' \
        'git_sha_range' \
        'git_sha' |
        fzf --no-multi --header "select pattern"
}

match_pattern() {
    if [ -z "$1" ]; then
        usage "No pattern specified."
    fi
    if [ -n "$_tmux_mode" ]; then
        _matches=$(for pane in $(tmux list-pane -a -F "#S:#I.#P"); do
            tmux capture-pane -t "$pane" -p
        done | $1)
    else
        # shellcheck disable=2086
        _matches=$(eval $1)
    fi

    if [ -n "$_select_mode" ]; then
        select_match "$_matches"
    else
        echo "$_matches"
    fi

    unset _select_mode _tmux_mode _matches
}

# --------------------------------------------------------------------- }}}
# Parse args                                                            {{{
# --------------------------------------------------------------------- {|}

# if stdin is piped or not tty
stdin_is_pipe_like() { [ -p /dev/stdin ] || ! [ -t 0 ]; }

main() {
    # Print usage info if `matpat` is called with no args, unless stdin
    # is piped, in which case prompt the user to select a pattern.
    ! stdin_is_pipe_like && [ -z "$1" ] && usage
    _pattern="select"

    # Automatically turn on tmux mode if attached and stdin is
    # not piped, otherwise it hangs waiting for stdin.
    ! stdin_is_pipe_like && [ -n "$TMUX" ] && _tmux_mode=1

    while getopts p:ths opt; do
        case $opt in
            h) usage ;;
            p) _pattern="$OPTARG" ;;
            t) _tmux_mode=1 ;;
            s) _select_mode=1 ;;
            *) usage "Invalid flag: $opt" ;;
        esac
    done

    shift "$((OPTIND - 1))"

    case $_pattern in
        i | ip | ip_address) match_pattern ip_address ;;
        r | range | git_range) match_pattern git_sha_range ;;
        s | sha | git_sha) match_pattern git_sha ;;
        u | uri | url) match_pattern uri ;;
        select) match_pattern "$(select_pattern)" ;;
        *) usage "Unknown pattern: $_pattern" ;;
    esac
}

main "$@"
