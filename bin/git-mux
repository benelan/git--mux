#!/usr/bin/env sh
set -e

usage_cli() {
    echo "$*"
    printf "Usage:            git mux <command> [<arg>...]

Commands:
  c,  clone       Clone and configure a bare git repo for use with worktrees.
  p,  project     Create or switch to a project (session).
                  Projects are usually (but not required to be) a git repo.
  t,  task        Create, switch, or send text to a task (window).
                  Tasks are usually (but not required to be) a git worktree.
  d,  debug       Run the following <command> and arguments with logging.
  h,  help        Show this message.

Examples:
  # Select a project and create or switch to its tmux session
  git mux p

  # Directly create or switch to a project (useful for aliases/keymaps/startup)
  git mux project ~/projects/my-app

  # Select a git branch and create or switch to its git worktree and tmux window
  git mux t

  # If 'feature/123' is a valid path, create or switch to its tmux window.
  # Otherwise assume it is a git branch and create or switch to its
  # worktree and window, creating the branch if it doesn't exist.
  git mux task feature/123

  # Run commands in a tmux window named npm_stuff without switching to it
  git mux task ~/projects/my-app npm_stuff npm i && npm run build

  # The previous example with logging
  git mux debug task ~/projects/my-app npm_stuff npm i && npm run build"
    exit 1
}

usage_config() {
    # shellcheck disable=2016
    cat <<EOF
git-mux can be configured with the following environment variables:

\$GIT_MUX_PROJECTS            Space-separated list of projects for selection.

\$GIT_MUX_PROJECT_PARENTS     Space-separated list of directories that contain
                              projects, defaults to \$PROJECTS or \$HOME.
                              - selects from their children (depth of 1)
                              - ignored if \$GIT_MUX_PROJECTS is set

\$GIT_MUX_SELECT_CMD          Command used to select a project, defaults to fzf.
                              - receives the directory list from stdin
                              - sends a single, selected directory to stdout

\$GIT_MUX_BRANCH_PREFIX       A prefix (followed by "/") to add to new branches,
                              off by default.
                              - ignored if the provided name already contains a "/"
                              - common examples are "feature" or "$(id -un)"

\$GIT_MUX_NEW_WORKTREE_CMD    Commands to execute in the new tmux window when
                              a new git worktree is created.
                              - for example, "[ -f "./package.json" ] && npm i

EOF
}

has_command() { command -v "$1" >/dev/null 2>&1; }

if [ -z "$GIT_MUX_SELECT_CMD" ] && ! has_command fzf; then
    echo "Error: install fzf or specify a different method for selection with the GIT_MUX_SELECT_CMD environment variable"
    exit 1
fi

GIT_MUX_DEBUG="${GIT_MUX_DEBUG:-}"

GIT_MUX_BRANCH_PREFIX=${GIT_MUX_BRANCH_PREFIX:-}

GIT_MUX_SELECT_CMD=${GIT_MUX_SELECT_CMD:-fzf --reverse}

GIT_MUX_PROJECT_PARENTS=${GIT_MUX_PROJECT_PARENTS:-${PROJECTS:-$HOME}}

GIT_MUX_PROJECTS=${GIT_MUX_PROJECTS:-$(
    # shellcheck disable=2086
    find $GIT_MUX_PROJECT_PARENTS -maxdepth 1 -mindepth 1 -type d
)}

# --------------------------------------------------------------------- }}}
# Utils                                                                 {{{
# --------------------------------------------------------------------- {|}

debugger() {
    if [ -n "$GIT_MUX_DEBUG" ]; then
        echo "$1"
    fi
}

sanitize_name() {
    basename "$1" | tr "./" "__"
}

# tmux utils from https://github.com/thoughtbot/dotfiles/blob/main/bin/tat
tmux_session_exists() {
    tmux has-session -t "=$1" >/dev/null 2>&1
}

in_tmux() {
    [ -n "$TMUX" ]
}

has_tmux_server() {
    [ -n "$(pgrep tmux)" ]
}

tmux_create_if_needed_and_attach() {
    project_path="${1:-$PWD}"
    project_name="$(sanitize_name "$project_path")"
    if in_tmux; then
        if ! tmux_session_exists "$project_name"; then
            debugger "project > creating \"$project_name\" at path \"$project_path\""
            tmux new-session -Adc "$project_path" -s "$project_name"
        fi
        debugger "project > switching to \"$project_name\" at path \"$project_path\""
        tmux switch-client -t "$project_name"
    else
        debugger "project > creating or attaching to \"$project_name\" at path \"$project_path\""
        tmux new-session -As "$project_name" -c "$project_path"
    fi
}

has_tmux_server && GIT_MUX_TMUX_SESSION="$(tmux display-message -p "#S")"

# --------------------------------------------------------------------- }}}
# Clone                                                                 {{{
# --------------------------------------------------------------------- {|}

# Clones a bare repo for use with git-worktree and creates an
# initial worktree for the repo's default branch.
# https://git-scm.com/docs/git-worktree
bare_clone() {
    new_repo_dir="${2:-"$(basename "$1" .git)"}"
    mkdir -p "$new_repo_dir"
    cd "$new_repo_dir" || return
    debugger "clone > cloning bare repo for \"$1\" in \"$(pwd)\""
    git clone --bare "$1" .git
    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
    git fetch origin
    # 60% of the time, it works every time (requires an "origin" or "upstream" remote)
    default_git_branch="$(
        git remote show "$(
            git remote | grep -Eo "(upstream|origin)" | tail -1
        )" | grep "HEAD branch" | cut -d" " -f5
    )"
    debugger "clone > creating worktree for default branch: $default_git_branch"
    git worktree add "$default_git_branch" "$default_git_branch"
    cd "$default_git_branch" || return
    unset new_repo_dir default_git_branch
}

# --------------------------------------------------------------------- }}}
# Project                                                               {{{
# --------------------------------------------------------------------- {|}

# See `git mux help config`
# shellcheck disable=2086
select_project() { printf "%s\n" $GIT_MUX_PROJECTS | $GIT_MUX_SELECT_CMD; }

# Creates or attaches to a tmux session for a project. If the following argument
# is a valid path, it is used for the project. Otherwise the user is prompted
# to select a project.
handle_project() {
    if [ -n "$1" ] && [ -d "$1" ]; then
        debugger "project > valid path provided: $1"
        tmux_create_if_needed_and_attach "$1"
    else
        debugger "project > a valid path was not provided, selecting a project"
        tmux_create_if_needed_and_attach "$(select_project)"
    fi
}

# Determines the absolute path of the selected or provided project.
find_project_directory() {
    for projects_dir in $GIT_MUX_PROJECTS; do
        if [ -d "$projects_dir/$GIT_MUX_TMUX_SESSION" ]; then
            echo "$projects_dir/$GIT_MUX_TMUX_SESSION"
            return
        fi
    done
    if [ "$GIT_MUX_TMUX_SESSION" = "$(basename ~)" ]; then
        # pick a project if in the home session
        select_project && return
    else
        pwd
    fi
    unset projects_dir
}

# --------------------------------------------------------------------- }}}
# Task                                                                  {{{
# --------------------------------------------------------------------- {|}

# Attaches/switches to a tmux window. If the next argument is a valid path,
# the window is created in that directory. If there are arguments after the
# path, the following one is used as the tmux window name. The rest of the
# arguments are sent to the window and executed instead of attaching/switching.
# This allows you to execute commands in the background and continue working.
#
#
# If the initial argument isn't a valid path it is treated a a git branch and
# creates/switches to a corresponding git worktree (when relevant). If no
# argument is provided it prompts to select an existing branch.
#
# Examples:
#
# Install deps and start app in a new or preexisting tmux window named 'start'.
# $ git mux task packages/app start npm install && npm start
#
# Create/checkout branch in tmux window, creating a git worktree if relevant.
# Appends $GIT_MUX_BRANCH_PREFIX to the argument when creating a new branch.
# $ git mux task 123-fix-bug
#
# Uses $GIT_MUX_SELECT_CMD to select an existing branch.
# $ git mux t
handle_task() {
    debugger "task > args: $*"
    # Check if the provided argument is a valid path
    if [ -n "$1" ] && [ -d "$1" ]; then
        task_dir="$(cd "$1" && pwd)"
        task_name="${2:-"$(sanitize_name "$task_dir")"}"
    else
        git_task "$@"
        return 0
    fi

    debugger "task > creating new \"$task_name\" task in \"$task_dir\""
    # Not using new-window's -S flag for backwards compatibility
    if ! tmux list-windows | grep -q "$task_name"; then
        tmux new-window -dn "$task_name" -c "$task_dir"
    fi

    # Attach, switch, or send keys to the new task
    if [ -n "$3" ]; then
        shift 2
        debugger "task > executing command (not attaching/switching): \"$*\""
        tmux send-keys -t "$GIT_MUX_TMUX_SESSION:$task_name" "$*" Enter
    elif [ -n "$TMUX" ]; then
        debugger "task > switching client"
        tmux switch-client -t "$GIT_MUX_TMUX_SESSION:$task_name"
    else
        debugger "task > attaching"
        tmux attach -t "$GIT_MUX_TMUX_SESSION:$task_name"
    fi

    unset task_name task_dir
}

# The logic that handles the git portion of the 'task' subcommand.
# See handle_task documentation above for more info.
git_task() {
    task_start_dir="$(find_project_directory)"

    debugger "task > project's directory: $task_start_dir"
    cd "$task_start_dir" || return 1

    if [ -d "$task_start_dir/.git" ] ||
        [ "$(git rev-parse --show-toplevel 2>/dev/null)" = "$task_start_dir" ]; then
        if [ -n "$1" ]; then
            task_branch="$1"
            debugger "task > provided branch: $task_branch"

            if ! git show-ref --verify --quiet "refs/heads/$task_branch" &&
                [ "${task_branch#*"/"}" = "$task_branch" ]; then
                task_branch="$GIT_MUX_BRANCH_PREFIX/$task_branch"
                debugger "task > added prefix to branch: $task_branch"
            fi

            ! git show-ref --verify --quiet "refs/heads/$task_branch" &&
                task_branch_flags="-b" &&
                debugger "task > branch not found and will be created"
            shift
        else
            task_branch=$(select_branch)
            debugger "task > selected branch: $task_branch"
        fi

        task_name="$(sanitize_name "$task_branch")"
        debugger "task > sanitized task name: $task_name"

        # naively assumes a bare repo will be using worktrees
        if [ "$(git config --get core.bare)" = "true" ]; then

            debugger "task > project is bare repo, using git-worktree"
            task_start_dir="$task_start_dir/$task_name"

            debugger "task > worktree directory: $task_start_dir"
            if [ ! -d "$task_start_dir" ]; then
                debugger "task > worktree does not exist, adding now"
                # shellcheck disable=2086
                git worktree add $task_name $task_branch_flags $task_branch

                # if provided, commands to the new worktree's tmux window
                [ -n "$GIT_MUX_NEW_WORKTREE_CMD" ] &&
                    tmux send-keys -t "$GIT_MUX_TMUX_SESSION:$task_name" \
                        "$GIT_MUX_NEW_WORKTREE_CMD" Enter
            fi
        else
            debugger "task > checking out branch"
            # shellcheck disable=2086
            git checkout $task_branch_flags $task_branch
        fi

        handle_task "$task_start_dir" \
            "${task_name:-$(sanitize_name "$task_branch")}" "$*"
    fi

    unset task_start_dir task_name task_branch task_branch_flags
}

# Use $GIT_MUX_SELECT_CMD to select an existing git branch for creating a task.
select_branch() {
    # remote and local branches sorted by commit date
    git for-each-ref refs/remotes refs/heads \
        --sort=-committerdate --format='%(refname:short)' |
        # filter by query, remove 'origin/' prefix, dedupe, select branch
        awk '/'"$GIT_MUX_BRANCH_DEFAULT_QUERY"'/{gsub("^origin/(HEAD)?","")};!x[$0]++' |
        $GIT_MUX_SELECT_CMD
}

# --------------------------------------------------------------------- }}}
# Parse args                                                            {{{
# --------------------------------------------------------------------- {|}

help() {
    case $1 in
        c | config) usage_config ;;
        *) usage_cli ;;
    esac
}

log_config_values() {
    cat <<EOF
git-mux running in debug mode...

Configuration
--------------
GIT_MUX_PROJECT_PARENTS:
$GIT_MUX_PROJECT_PARENTS

GIT_MUX_PROJECTS:
$GIT_MUX_PROJECTS

GIT_MUX_SELECT_CMD:
$GIT_MUX_SELECT_CMD

GIT_MUX_BRANCH_PREFIX:
$GIT_MUX_BRANCH_PREFIX

GIT_MUX_NEW_WORKTREE_CMD
$GIT_MUX_NEW_WORKTREE_CMD

Logs
---------------
EOF
}

main() {
    if [ -n "$1" ]; then
        case $1 in
            c | clone)
                shift
                bare_clone "$@"
                ;;
            p | project)
                shift
                handle_project "$@"
                ;;
            t | task)
                shift
                handle_task "$@"
                ;;
            h | help | -h | --help)
                shift
                help "$@"
                ;;
            d | debug)
                GIT_MUX_DEBUG=1
                shift
                log_config_values
                main "$@"
                ;;
            *)
                usage_cli "Invalid command: $1"
                ;;
        esac
    else
        usage_cli
    fi
}

# --------------------------------------------------------------------- }}}

main "$@"
